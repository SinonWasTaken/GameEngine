vec2 unity_gradientNoise_dir(vec2 p); float unity_gradientNoise(vec2 p); float Unity_GradientNoise_float(vec2 UV, float Scale); 
vec2 unity_gradientNoise_dir(vec2 p) { p = p % 289; float x = (34 * p.x + 1) * p.x % 289 + p.y; x = (34 * x + 1) * x % 289; x = frac(x / 41) * 2 - 1; return normalize(vec2(x - floor(x + 0.5), abs(x) - 0.5)); } float unity_gradientNoise(vec2 p) { vec2 ip = floor(p); vec2 fp = frac(p); float d00 = dot(unity_gradientNoise_dir(ip), fp); float d01 = dot(unity_gradientNoise_dir(ip + vec2(0, 1)), fp - vec2(0, 1)); float d10 = dot(unity_gradientNoise_dir(ip + vec2(1, 0)), fp - vec2(1, 0)); float d11 = dot(unity_gradientNoise_dir(ip + vec2(1, 1)), fp - vec2(1, 1)); fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10); return mix(mix(d00, d01, fp.y), mix(d10, d11, fp.y), fp.x); } float Unity_GradientNoise_float(vec2 UV, float Scale) { return unity_gradientNoise(UV * Scale) + 0.5; }